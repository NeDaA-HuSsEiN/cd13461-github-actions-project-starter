name: Deploy Knowledge Base

on:

  push:
    branches:
      - main
    # Ignore changes in specific files
    paths-ignore:
      - '.gitignore'
      - 'README.md'
      - 'CONTRIBUTING.md'
      - 'LICENSE'

  pull_request:
    branches:
      - main  

  workflow_dispatch: # Allows manual trigger in case of emergency

concurrency:
  group: knowledge-base
  cancel-in-progress: true # If a new run is triggered while a previous run is still in progress, the previous run should be canceled automatically.

jobs:
  # Job 1: Test
  test:
  
    runs-on: ubuntu-latest
    timeout-minutes: 2
    
    steps:
    
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js (version 18+)
        uses: actions/setup-node@v4
        with: 
          node-version: "18"
      
      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with: 
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('~/.npm') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm ci

      - name: Run Linters
        run: npm run lint:all

      - name: Run URL checker
        env:
          URL_CHECKER_TIMEOUT: 5000
        run: node script/url-checker.js -t $URL_CHECKER_TIMEOUT -d src/posts

  # Job 2: Build
  build:
    
    needs: test # Ensure test job is successful before building
    runs-on: ubuntu-latest
    timeout-minutes: 2
    
    steps:
    
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Setup Node.js (version 18+)
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Cache Node Modules
        uses: actions/cache@v4
        with: 
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('~/.npm') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install Dependencies
        run: |
          npm ci
          
      - name: Set PATH_PREFIX
        run: |
          PP="/$(echo "${{ github.repository }}" | cut -d '/' -f2-)/"
          echo "PATH_PREFIX=$PP" >> $GITHUB_ENV

      - name: Build site
        run: |
          npm run prod

      - name: Upload built site as artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "_site"

  # Job 3: Deploy
  deploy:
  
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      issues: write
      id-token: write
      contents: write
    needs: build # Ensure build job is successful before deploying
    runs-on: ubuntu-latest

    steps:
    
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Issue Deployment Status
        run: |
          echo "# Deployment status: ${{ steps.deployment.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "Deployed ${{ github.ref }} to ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY

      - name: Report issue
        run: |
          gh auth login --with-token <<<"${{ secrets.GITHUB_TOKEN }}"
          DATE=$(date -u)
          STATUS="${{ steps.deployment.outcome }}"
          ISSUE_TITLE="$DATE - Deployment: $STATUS"
          URL="${{ steps.deployment.outputs.page_url }}"
          ISSUE_BODY="URL: $URL"
          echo "Title: $ISSUE_TITLE. Body: $ISSUE_BODY."
          gh issue create --repo ${{ github.repository }} --title "$ISSUE_TITLE" --body "$ISSUE_BODY"